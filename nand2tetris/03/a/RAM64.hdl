// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load,sel=address[3..5],a=b0,b=b1,c=b2,d=b3,e=b4,f=b5,g=b6,h=b7);
    RAM8(in=in,out=out0,load=b0,address=address[0..2]);
    RAM8(in=in,out=out1,load=b1,address=address[0..2]);
    RAM8(in=in,out=out2,load=b2,address=address[0..2]);
    RAM8(in=in,out=out3,load=b3,address=address[0..2]);

    RAM8(in=in,out=out4,load=b4,address=address[0..2]);
    RAM8(in=in,out=out5,load=b5,address=address[0..2]);
    RAM8(in=in,out=out6,load=b6,address=address[0..2]);
    RAM8(in=in,out=out7,load=b7,address=address[0..2]);

    Mux8Way16(a=out0,b=out1,c=out2,d=out3,e=out4,f=out5,g=out6,h=out7,sel=address[3..5],out=out);



}