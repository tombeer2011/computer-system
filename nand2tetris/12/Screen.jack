// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int address;
        let address=16384;
        while(address<24576){
            do Memory.poke(address,0);
            let address=address+1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color=b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int i,divNum,address,remain,temp;
        if((x>511)|(y>255)){
            do Sys.error(11);
        }
        let i=1;
        let divNum=Math.divide(x,16);
        let address=16384+Math.multiply(y,32)+divNum;
        let remain=x-Math.multiply(divNum,16);
        let temp=Memory.peek(address);
        while(remain>0){
            let i=i+i;
            let remain=remain-1;
        }
        //if color = false, negate the i to draw white pixel
        if(color){
            let temp=(temp|i);          
        }
        else{
            let i = ~i;
            let temp = (temp&i);
        }
        do Memory.poke(address,temp);  
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a,b,dx,dy,compDx,compDy,adyMinusbdx;
        let dx=x2-x1;
        let dy=y2-y1;
        let compDx=Math.abs(dx)+1;
        let compDy=Math.abs(dy)+1;
        let a=0;
        let b=0;
        if (dy=0){
            if(dx>0){
                while(a<compDx){
                    do Screen.drawPixel(x1+a,y1);
                    let a=a+1;               
                }
                return;                
            }
            else{
                while(a<compDx){
                    do Screen.drawPixel(x1-a,y1);
                    let a=a+1;               
                }
                return;  
            }
        }
        if (dx=0){
            if(dy>0){
                while(a<compDy){
                    do Screen.drawPixel(x1,y1+a);
                    let a=a+1;               
                }
                return;                
            }
            else{
                while(a<compDy){
                    do Screen.drawPixel(x1,y1-a);
                    let a=a+1;               
                }
                return;  
            }
        }

        if((dx>0)&(dy>0)){
            let adyMinusbdx=0;
            while((a<compDx)&(b<compDy)){
                do Screen.drawPixel(x1+a,y1+b);
                if(adyMinusbdx<0){
                    let adyMinusbdx=adyMinusbdx+dy;
                    let a=a+1;
                }
                else{
                    let adyMinusbdx=adyMinusbdx-dx;
                    let b=b+1;
                }
            }
            return;
        }

        if((dx<1)&(dy<1)){
            let adyMinusbdx=0;
            while((a<compDx)&(b<compDy)){
                do Screen.drawPixel(x2+a,y2+b);
                if(adyMinusbdx<0){
                    let adyMinusbdx=adyMinusbdx-dy;
                    let a=a+1;
                }
                else{
                    let adyMinusbdx=adyMinusbdx+dx;
                    let b=b+1;
                }
            }
            return;
        }

        if((dx>0)&(dy<1)){
            let adyMinusbdx=0;
            while((a<compDx)&(b<compDy)){
                do Screen.drawPixel(x1+a,y1-b);
                if(adyMinusbdx<0){
                    let adyMinusbdx=adyMinusbdx-dy;
                    let a=a+1;
                }
                else{
                    let adyMinusbdx=adyMinusbdx-dx;
                    let b=b+1;
                }
            }
            return;
        }

        if((dy>0)&(dx<1)){
            let adyMinusbdx=0;
            while((a<compDx)&(b<compDy)){
                do Screen.drawPixel(x2+a,y2-b);
                if(adyMinusbdx<0){
                    let adyMinusbdx=adyMinusbdx+dy;
                    let a=a+1;
                }
                else{
                    let adyMinusbdx=adyMinusbdx+dx;
                    let b=b+1;
                }
            }
            return;
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y=y1;
        while(y<y2){
            do Screen.drawLine(x1,y,x2,y);
            let y=y+1;
        }
        do Screen.drawLine(x1,y,x2,y);
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int y,dy,dyPower,rPower,halfDistance,sqrNum,xLeft,xRight;
        if((cx>511)|(cy>255)|(r>181)){
            do Sys.error(12);
        }
        let dy=-r;
        let rPower=Math.multiply(r,r);
        while(dy<r){
            let dyPower=Math.multiply(dy,dy);
            let halfDistance=rPower-dyPower;
            let sqrNum=Math.sqrt(halfDistance);
            let xLeft=cx-sqrNum;
            let xRight=cx+sqrNum;
            let y=cy+dy;
            do Screen.drawLine(xLeft,y,xRight,y);
            let dy=dy+1;
        }
        do Screen.drawPixel(cx,cy+r);
        return;
    }
}
