// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   //先判断如果是zx=1,那么每一位都要变成0

   Not(in=zx,out=zxbar);
   Extend(a=zxbar,out=extended);
   And16(a=extended,b=x,out=tmpx1);

   Extend(a=nx,out=nx16);
   Xor16(a=tmpx1,b=nx16,out=tmpx2);

   Not(in=zy,out=zybar);
   Extend(a=zybar,out=extendedy);
   And16(a=extendedy,b=y,out=tmpy1);

   Extend(a=ny,out=ny16);
   Xor16(a=tmpy1,b=ny16,out=tmpy2);

   //先分别做完两种运算然后通过选择器进行选择


   Add16(a=tmpx2,b=tmpy2,out=tmpout1);
   And16(a=tmpx2,b=tmpy2,out=tmpout2);

   Mux16(a=tmpout2,b=tmpout1,sel=f,out=aftersel);



   //如果是no=1的话要取反，否则不用取反-输入的是aftersel，输出的是afterno

   Not16(in=aftersel,out=afterselno);
   Mux16(a=aftersel,b=afterselno,sel=no,out=afterno);



   //如果最高位是1那么就是负数，如果全部是0，那么才是0
   And16(a=true,b=afterno,out=out);
   //内部线路的总线不能拆分！！！

   //如果最高位是1,那么输出ng=1

   And16(a=afterno,b[15]=true,b[0..14]=false,out=tmpres);
   Or16Way(in=tmpres,out=ng);


   //如果全部是0，那么输出zr=1
   Or16Way(in=afterno,out=zrbar);
   Not(in=zrbar,out=zr);


}